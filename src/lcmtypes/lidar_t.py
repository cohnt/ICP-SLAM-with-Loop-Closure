"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lidar_t(object):
    __slots__ = ["utime", "num_ranges", "ranges", "thetas", "times", "intensities"]

    __typenames__ = ["int64_t", "int32_t", "float", "float", "int64_t", "float"]

    __dimensions__ = [None, None, ["num_ranges"], ["num_ranges"], ["num_ranges"], ["num_ranges"]]

    def __init__(self):
        self.utime = 0
        self.num_ranges = 0
        self.ranges = []
        self.thetas = []
        self.times = []
        self.intensities = []

    def encode(self):
        buf = BytesIO()
        buf.write(lidar_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_ranges))
        buf.write(struct.pack('>%df' % self.num_ranges, *self.ranges[:self.num_ranges]))
        buf.write(struct.pack('>%df' % self.num_ranges, *self.thetas[:self.num_ranges]))
        buf.write(struct.pack('>%dq' % self.num_ranges, *self.times[:self.num_ranges]))
        buf.write(struct.pack('>%df' % self.num_ranges, *self.intensities[:self.num_ranges]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lidar_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lidar_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lidar_t()
        self.utime, self.num_ranges = struct.unpack(">qi", buf.read(12))
        self.ranges = struct.unpack('>%df' % self.num_ranges, buf.read(self.num_ranges * 4))
        self.thetas = struct.unpack('>%df' % self.num_ranges, buf.read(self.num_ranges * 4))
        self.times = struct.unpack('>%dq' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.intensities = struct.unpack('>%df' % self.num_ranges, buf.read(self.num_ranges * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lidar_t in parents: return 0
        tmphash = (0xc4ee2dc3cd282b67) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lidar_t._packed_fingerprint is None:
            lidar_t._packed_fingerprint = struct.pack(">Q", lidar_t._get_hash_recursive([]))
        return lidar_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

